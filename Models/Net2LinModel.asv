classdef Net2LinModel < handle
    % Species:
    %   AA - active A
    %   BA - active B
    %   CA - active C
    % Reaction network (deterministic):
%     z[0] =  c1 * u * (AT-A)  -  c2 * A  - c8 * B
%     z[1] =  c3 * A * (BT-B)  -  c4 * B
%     z[2] =  c5 * A * (CT-C)  -  c6 * B * C  -  c7 * C
    % Reaction network (stochastic, 7 rxns):
    %   c1: u + AI -> u + AA
    %   c2: AA -> AI
    %   c3: AA + BI -> AA + BA
    %   c4: BA -> BI
    %   c5: AA + CI -> AA + CA
    %   c6: BA + CA <-> BACA -> BA + CI
    %   c7: CA -> CI
    %   c6: BA + AA <-> BAAA -> BA + AI
    % Parameters:
    %   8 stochastic rate constants (c values) above
    %   3 total A, B, C constraints (AT, BT, CT)
    %
    % METHODS:
    %   model = Net2LinModel(params, input, deltaInput) ALL OPT INPUTS
    %   changeParams(this, paramSet)
    %   [T,X]=initializeInput(this, input)
    %   [T,X] = simulate(this, mode, deltaInput)
    
    properties
        % network properties
        speciesList = {'A', 'B', 'C'};
        M = 8;
        stoich_matrix = [ 1 0 0 ; % prod. A
            -1 0 0 ; % deg. A
            0 1 0 ; % prod. B
            0 -1 0; % deg. B
            0 0 1 ; % prod. C
            0 0 -1 ; %inh. C by B
            0 0 -1; %deg. C
            -1 0 0]; %inh. A by B
        params = zeros(1,11);
        folder = 'Data Lin Impl BC Data';
        
        % simulation properties
        delayBeforeStim = 0.5; %sec
        input = -1;
        deltaInput = -1;
        X0 = [-1 -1 -1];
        initialized = false;
    end
    methods
        function model = Net2LinModel(params, input, deltaInput)
            if exist('params','var'); model.params = ternif(~any(params<0), params, -1);end
            if exist('input','var'); model.input = ternif(~(input<0), input, -1);end
            if exist('deltaInput','var'); model.deltaInput = ternif(~(deltaInput<0), deltaInput, -1);end
            model.initialized = false;
        end
        function changeParams(this, paramSet)
            if length(paramSet)~=10; error('Parameter vector has incorrect size for this model'); end
            this.params = paramSet;
            this.initialized = false;
        end
        function [T,X]=initializeInput(this, input, InitialX)
            if exist('input','var')
                this.input = ternif(~(input<0), input, -1);
            else
                this.input = 1;
            end
            if exist('InitialX','var'); IC = InitialX; else IC = floor(this.params(8:10)./3); end;
            if any(IC<1); error('Initial X (before initialization) is less than 1'); end;
            opts  = odeset('RelTol',1e-4, 'AbsTol', 1e-6, 'MaxStep',1);%, 'OutputFcn', this.ode_outputFcn);
            T = [];
            X = [];
            Eps = [1 1 1];
            while(any(Eps>0.1))
                [Ttemp,Xtemp] = ode15s(@(t,y) ode_fcn(this, t, y), [1 50], IC, opts);
                Eps = abs(Xtemp(end,:)-Xtemp(end-1,:));
                T = [T; Ttemp];
                X = [X; Xtemp];
                if length(T)>500
                    break;
                end
            end
            
            this.X0 = X(end,:);
            assert(length(this.X0) == length(this.speciesList));
            this.initialized = true;
        end
        function [T,X] = simulate(this, mode, deltaInput, simTime)
            %[T,X] = simulate(this, mode, deltaInput)
            %   options for mode are CME, langevin, ODE
            %   deltaInput is an optional argument, only use it if you want
            %       it to be different than the originally initialized
            %       deltaInput, which is an attribute of this class
            if ~this.initialized; disp('WARNING: Running simulation without initializing to Steady State'); end;
            if ~exist('mode','var'); error('MUST tell the simulator what simulation algorithm to use'); end;
            if ~ismember(mode, {'CME', 'langevin','ODE','ODE_afterSS'}); error('Illegal simulation mode'); end;
            if exist('deltaInput','var'); this.deltaInput= deltaInput; end;
            sim = ternif(exist('simTime','var'), simTime, 6);
           
            assert(~any(this.X0==[-1 -1 -1]));
            switch mode
                case 'CME'
                    [T2,X2] = directMethod(this.stoich_matrix, @(X) prop_fcn(this, X), [0 sim], round(this.X0));
                case 'langevin'
                    [T2,X2] = langevinCustom(this.stoich_matrix, @(X) prop_fcn(this, X), [0 sim], this.X0);
                case {'ODE','ODE_afterSS'}
                    opts  = odeset('RelTol',1e-4, 'AbsTol', 1e-6, 'MaxStep',1);%, 'OutputFcn',this.ode_outputFcn);
                    [T2,X2] = ode15s(@(t,y) ode_fcn(this, t, y), [0 sim], this.X0, opts);
                otherwise
                    error('Incorrect simulation mode');
            end
            T = [-this.delayBeforeStim; T2];
            X = [this.X0; X2];
        end
        function a = prop_fcn(this, X)
            % init is a boolean that determines if this is a initialization
            % or simulation run. true for initialization.
            if (this.input<0 || this.deltaInput<0); error('No input has been initialized, cannot simulate without X0'); end

            u = this.input+this.deltaInput;
            
            p = this.params;
            c1 = p(1);
            c2= p(2);
            c3 = p(3);
            c4 = p(4);
            c5 = p(5);
            c6 = p(6);
            c7 = p(7);
            c8 = p(8);
            AT = p(9);
            BT = p(10);
            CT = p(11);
            
            A = ternif(X(1)<=0, 0, X(1));
            B = ternif(X(2)<=0, 0, X(2));
            C = ternif(X(3)<=0, 0, X(3));
            a(1) = c1.*u.*(AT-A);
            a(2) = c2.*A;
            a(3) = c3.*A.*(BT-B);
            a(4) = c4.*B;
            a(5) = c5.*A.*(CT-C);
            a(6) = c6.*B.*C;
            a(7) = c7.*C;
            a(8) = c8.*B.*A;
            a = a';
        end
        function dXdt = ode_fcn(this, t, X)
            if this.input<0 || (this.initialized && this.deltaInput<0); error('No input has been initialized'); end
            if this.initialized; u = this.input+this.deltaInput; else u = this.input; end
            
            c = this.params;
            A = X(1);
            B = X(2);
            C = X(3);
            AT = c(8);
            BT = c(9);
            CT = c(10);
            dXdt = [c(1)*u.*(AT-A) - c(2).*A - c(8).*;
                c(3).*A.*(BT-B) - c(4).*B;
                c(5).*A.*(CT-C) - c(6).*B.*C - c(7).*C];
        end
        function status = ode_outputFcn(t, X, p, u)
            disp('ODE OUTPUT FCN DOESNT WORK YET');
            status = 0;
            %             if this.input<0; error('No input has been initialized'); end
            %             c = this.params;
            %             u=this.input;
            %             A = X(1);
            %             B = X(2);
            %             C = X(3);
            %             dXdt = [c(1)*u.*(AT-A) - c(2).*A;
            %                 c(3).*A.*(BT-B) - c(4).*B;
            %                 c(5).*A.*(CT-C) - c(6).*B.*C - c(7).*C];
            %             epsilon = 10^-5;
            %             maxdXdt = matmax(dXdt);
            %             status = (maxdXdt<epsilon);
        end
    end
end
